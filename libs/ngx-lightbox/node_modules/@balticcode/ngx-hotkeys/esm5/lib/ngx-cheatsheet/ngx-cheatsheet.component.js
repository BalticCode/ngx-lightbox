/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { NgxHotkeysService } from '../ngx-hotkeys.service';
var NgxCheatsheetComponent = /** @class */ (function () {
    function NgxCheatsheetComponent(hotkeysService) {
        this.hotkeysService = hotkeysService;
        this.helpVisible = false;
        this._map = {
            command: '\u2318',
            // ⌘
            shift: '\u21E7',
            // ⇧
            left: '\u2190',
            // ←
            right: '\u2192',
            // →
            up: '\u2191',
            // ↑
            down: '\u2193',
            // ↓
            'return': '\u23CE',
            // ⏎
            backspace: '\u232B' // ⌫
        };
        this.title = this.hotkeysService.options.cheatSheetTitle;
    }
    /**
     * @return {?}
     */
    NgxCheatsheetComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this._subscription = this.hotkeysService.cheatSheetToggled
            .subscribe(function (isOpen) {
            if (isOpen !== false) {
                _this.hotkeys = _this.hotkeysService.hotkeys
                    .filter(function (hotkey) { return hotkey.description; });
            }
            if (isOpen === false) {
                _this.helpVisible = false;
            }
            else {
                _this.toggleCheatSheet();
            }
        });
    };
    /**
     * @param {?} hotkey
     * @return {?}
     */
    NgxCheatsheetComponent.prototype.formatHotkey = /**
     * @param {?} hotkey
     * @return {?}
     */
    function (hotkey) {
        if (!hotkey.format) {
            /** @type {?} */
            var combo = Array.isArray(hotkey.combo) ? hotkey.combo[0] : hotkey.combo;
            /** @type {?} */
            var sequence = combo.split(/[\s]/);
            for (var i = 0; i < sequence.length; i++) {
                sequence[i] = this.symbolize(sequence[i]);
            }
            hotkey.format = sequence;
        }
        return hotkey.format;
    };
    /**
     * @param {?} combo
     * @return {?}
     */
    NgxCheatsheetComponent.prototype.symbolize = /**
     * @param {?} combo
     * @return {?}
     */
    function (combo) {
        /** @type {?} */
        var comboSplit = combo.split('+');
        for (var i = 0; i < comboSplit.length; i++) {
            // try to resolve command / ctrl based on OS:
            if (comboSplit[i] === 'mod') {
                if (window.navigator && window.navigator.platform.indexOf('Mac') >= 0) {
                    comboSplit[i] = 'command';
                }
                else {
                    comboSplit[i] = 'ctrl';
                }
            }
            comboSplit[i] = this._map[comboSplit[i]] || comboSplit[i];
        }
        return comboSplit.join(' + ');
    };
    /**
     * @return {?}
     */
    NgxCheatsheetComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this._subscription) {
            this._subscription.unsubscribe();
        }
    };
    /**
     * @return {?}
     */
    NgxCheatsheetComponent.prototype.toggleCheatSheet = /**
     * @return {?}
     */
    function () {
        this.helpVisible = !this.helpVisible;
    };
    NgxCheatsheetComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-cheatsheet',
                    template: "<div class=\"ngx-cheatsheet fade\" [ngClass]=\"{'in': helpVisible}\" style=\"display:none\">\n  <div class=\"ngx-cheatsheet__hotkeys\">\n    <h4 class=\"ngx-cheatsheet__hotkeys__title\">{{ title }}</h4>\n    <table>\n      <tbody>\n      <tr *ngFor=\"let hotkey of hotkeys\">\n        <td class=\"ngx-cheatsheet__hotkeys__keys\">\n          <span class=\"ngx-cheatsheet__hotkeys__keys__key\">{{ formatHotkey(hotkey) }}</span>\n        </td>\n        <td class=\"ngx-cheatsheet__hotkeys__keys__text\">{{ hotkey.description }}</td>\n      </tr>\n      </tbody>\n    </table>\n    <div class=\"ngx-cheatsheet__hotkeys__close\" (click)=\"toggleCheatSheet()\">&#215;</div>\n  </div>\n</div>\n",
                    styles: [".ngx-cheatsheet{display:table!important;position:fixed;width:100%;height:100%;top:0;left:0;color:#333;font-size:1em;background-color:rgba(255,255,255,.9)}.ngx-cheatsheet.fade{z-index:-1024;visibility:hidden;opacity:0;transition:opacity .15s linear}.ngx-cheatsheet.fade.in{z-index:10002;visibility:visible;opacity:1}.ngx-cheatsheet__hotkeys{width:100%;height:100%;display:table-cell;vertical-align:middle}.ngx-cheatsheet__hotkeys__title{font-weight:700;text-align:center;font-size:1.2em}.ngx-cheatsheet__hotkeys table{margin:auto;color:#333}.ngx-cheatsheet__hotkeys__keys{padding:5px;text-align:right}.ngx-cheatsheet__hotkeys__keys__key{display:inline-block;color:#fff;background-color:#333;border:1px solid #333;border-radius:5px;text-align:center;margin-right:5px;box-shadow:inset 0 1px 0 #666,0 1px 0 #bbb;padding:5px 9px;font-size:1em}.ngx-cheatsheet__hotkeys__keys__text{padding-left:10px;font-size:1em}.ngx-cheatsheet__hotkeys__close{position:fixed;top:20px;right:20px;font-size:2em;font-weight:700;padding:5px 10px;border:1px solid #ddd;border-radius:5px;min-height:45px;min-width:45px;text-align:center}@media all and (max-width:500px){.ngx-cheatsheet__hotkeys{font-size:.8em}}@media all and (min-width:750px){.ngx-cheatsheet__hotkeys{font-size:1.2em}}"]
                }] }
    ];
    /** @nocollapse */
    NgxCheatsheetComponent.ctorParameters = function () { return [
        { type: NgxHotkeysService }
    ]; };
    NgxCheatsheetComponent.propDecorators = {
        title: [{ type: Input }]
    };
    return NgxCheatsheetComponent;
}());
export { NgxCheatsheetComponent };
if (false) {
    /** @type {?} */
    NgxCheatsheetComponent.prototype.title;
    /** @type {?} */
    NgxCheatsheetComponent.prototype.helpVisible;
    /** @type {?} */
    NgxCheatsheetComponent.prototype.hotkeys;
    /** @type {?} */
    NgxCheatsheetComponent.prototype._subscription;
    /** @type {?} */
    NgxCheatsheetComponent.prototype._map;
    /** @type {?} */
    NgxCheatsheetComponent.prototype.hotkeysService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWNoZWF0c2hlZXQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGJhbHRpY2NvZGUvbmd4LWhvdGtleXMvIiwic291cmNlcyI6WyJsaWIvbmd4LWNoZWF0c2hlZXQvbmd4LWNoZWF0c2hlZXQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLEtBQUssRUFBb0IsTUFBTSxlQUFlLENBQUM7QUFHbEUsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sd0JBQXdCLENBQUM7O0lBNkJ2RCxnQ0FBb0IsY0FBaUM7UUFBakMsbUJBQWMsR0FBZCxjQUFjLENBQW1COzJCQWhCdkMsS0FBSztvQkFLQztZQUNsQixPQUFPLEVBQUUsUUFBUTs7WUFDakIsS0FBSyxFQUFFLFFBQVE7O1lBQ2YsSUFBSSxFQUFFLFFBQVE7O1lBQ2QsS0FBSyxFQUFFLFFBQVE7O1lBQ2YsRUFBRSxFQUFFLFFBQVE7O1lBQ1osSUFBSSxFQUFFLFFBQVE7O1lBQ2QsUUFBUSxFQUFFLFFBQVE7O1lBQ2xCLFNBQVMsRUFBRSxRQUFRO1NBQ3BCO1FBR0MsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUM7S0FDMUQ7Ozs7SUFFRCx5Q0FBUTs7O0lBQVI7UUFBQSxpQkFjQztRQWJDLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxpQkFBaUI7YUFDdkQsU0FBUyxDQUFDLFVBQUMsTUFBTTtZQUNoQixJQUFJLE1BQU0sS0FBSyxLQUFLLEVBQUU7Z0JBQ3BCLEtBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPO3FCQUN2QyxNQUFNLENBQUMsVUFBQSxNQUFNLElBQUksT0FBQSxNQUFNLENBQUMsV0FBVyxFQUFsQixDQUFrQixDQUFDLENBQUM7YUFDekM7WUFFRCxJQUFJLE1BQU0sS0FBSyxLQUFLLEVBQUU7Z0JBQ3BCLEtBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO2FBQzFCO2lCQUFNO2dCQUNMLEtBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO2FBQ3pCO1NBQ0YsQ0FBQyxDQUFDO0tBQ047Ozs7O0lBRUQsNkNBQVk7Ozs7SUFBWixVQUFhLE1BQWU7UUFDMUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUU7O1lBQ2xCLElBQU0sS0FBSyxHQUFXLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDOztZQUNuRixJQUFNLFFBQVEsR0FBYSxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQy9DLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUN4QyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUMzQztZQUNELE1BQU0sQ0FBQyxNQUFNLEdBQUcsUUFBUSxDQUFDO1NBQzFCO1FBQ0QsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDO0tBQ3RCOzs7OztJQUVPLDBDQUFTOzs7O2NBQUMsS0FBYTs7UUFDN0IsSUFBTSxVQUFVLEdBQWEsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM5QyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsVUFBVSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTs7WUFFMUMsSUFBSSxVQUFVLENBQUMsQ0FBQyxDQUFDLEtBQUssS0FBSyxFQUFFO2dCQUMzQixJQUFJLE1BQU0sQ0FBQyxTQUFTLElBQUksTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRTtvQkFDckUsVUFBVSxDQUFDLENBQUMsQ0FBQyxHQUFHLFNBQVMsQ0FBQztpQkFDM0I7cUJBQU07b0JBQ0wsVUFBVSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQztpQkFDeEI7YUFDRjtZQUNELFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUMzRDtRQUNELE9BQU8sVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQzs7Ozs7SUFHaEMsNENBQVc7OztJQUFYO1FBQ0UsSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ3RCLElBQUksQ0FBQyxhQUFhLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDbEM7S0FDRjs7OztJQUVNLGlEQUFnQjs7OztRQUNyQixJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQzs7O2dCQWpGeEMsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxnQkFBZ0I7b0JBQzFCLDJyQkFBOEM7O2lCQUUvQzs7OztnQkFQTyxpQkFBaUI7Ozt3QkFVdEIsS0FBSzs7aUNBYlI7O1NBV2Esc0JBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIElucHV0LCBPbkRlc3Ryb3ksIE9uSW5pdH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1N1YnNjcmlwdGlvbn0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7Tmd4SG90a2V5c1NlcnZpY2V9IGZyb20gJy4uL25neC1ob3RrZXlzLnNlcnZpY2UnO1xuaW1wb3J0IHtJSG90a2V5fSBmcm9tICcuLi9pbnRlcmZhY2VzJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbmd4LWNoZWF0c2hlZXQnLFxuICB0ZW1wbGF0ZVVybDogJy4vbmd4LWNoZWF0c2hlZXQuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9uZ3gtY2hlYXRzaGVldC5jb21wb25lbnQuc2NzcyddXG59KVxuZXhwb3J0IGNsYXNzIE5neENoZWF0c2hlZXRDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG5cbiAgQElucHV0KClcbiAgdGl0bGU6IHN0cmluZztcblxuICBoZWxwVmlzaWJsZSA9IGZhbHNlO1xuICBob3RrZXlzOiBJSG90a2V5W107XG5cbiAgcHJpdmF0ZSBfc3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG5cbiAgcHJpdmF0ZSBfbWFwOiBhbnkgPSB7XG4gICAgY29tbWFuZDogJ1xcdTIzMTgnLCAgICAgICAvLyDijJhcbiAgICBzaGlmdDogJ1xcdTIxRTcnLCAgICAgICAgIC8vIOKHp1xuICAgIGxlZnQ6ICdcXHUyMTkwJywgICAgICAgICAgLy8g4oaQXG4gICAgcmlnaHQ6ICdcXHUyMTkyJywgICAgICAgICAvLyDihpJcbiAgICB1cDogJ1xcdTIxOTEnLCAgICAgICAgICAgIC8vIOKGkVxuICAgIGRvd246ICdcXHUyMTkzJywgICAgICAgICAgLy8g4oaTXG4gICAgJ3JldHVybic6ICdcXHUyM0NFJywgICAgICAvLyDij45cbiAgICBiYWNrc3BhY2U6ICdcXHUyMzJCJyAgICAgIC8vIOKMq1xuICB9O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaG90a2V5c1NlcnZpY2U6IE5neEhvdGtleXNTZXJ2aWNlKSB7XG4gICAgdGhpcy50aXRsZSA9IHRoaXMuaG90a2V5c1NlcnZpY2Uub3B0aW9ucy5jaGVhdFNoZWV0VGl0bGU7XG4gIH1cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLl9zdWJzY3JpcHRpb24gPSB0aGlzLmhvdGtleXNTZXJ2aWNlLmNoZWF0U2hlZXRUb2dnbGVkXG4gICAgICAuc3Vic2NyaWJlKChpc09wZW4pID0+IHtcbiAgICAgICAgaWYgKGlzT3BlbiAhPT0gZmFsc2UpIHtcbiAgICAgICAgICB0aGlzLmhvdGtleXMgPSB0aGlzLmhvdGtleXNTZXJ2aWNlLmhvdGtleXNcbiAgICAgICAgICAgIC5maWx0ZXIoaG90a2V5ID0+IGhvdGtleS5kZXNjcmlwdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNPcGVuID09PSBmYWxzZSkge1xuICAgICAgICAgIHRoaXMuaGVscFZpc2libGUgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnRvZ2dsZUNoZWF0U2hlZXQoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gIH1cblxuICBmb3JtYXRIb3RrZXkoaG90a2V5OiBJSG90a2V5KTogc3RyaW5nW10ge1xuICAgIGlmICghaG90a2V5LmZvcm1hdCkge1xuICAgICAgY29uc3QgY29tYm86IHN0cmluZyA9IEFycmF5LmlzQXJyYXkoaG90a2V5LmNvbWJvKSA/IGhvdGtleS5jb21ib1swXSA6IGhvdGtleS5jb21ibztcbiAgICAgIGNvbnN0IHNlcXVlbmNlOiBzdHJpbmdbXSA9IGNvbWJvLnNwbGl0KC9bXFxzXS8pO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZXF1ZW5jZS5sZW5ndGg7IGkrKykge1xuICAgICAgICBzZXF1ZW5jZVtpXSA9IHRoaXMuc3ltYm9saXplKHNlcXVlbmNlW2ldKTtcbiAgICAgIH1cbiAgICAgIGhvdGtleS5mb3JtYXQgPSBzZXF1ZW5jZTtcbiAgICB9XG4gICAgcmV0dXJuIGhvdGtleS5mb3JtYXQ7XG4gIH1cblxuICBwcml2YXRlIHN5bWJvbGl6ZShjb21ibzogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBjb25zdCBjb21ib1NwbGl0OiBzdHJpbmdbXSA9IGNvbWJvLnNwbGl0KCcrJyk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb21ib1NwbGl0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAvLyB0cnkgdG8gcmVzb2x2ZSBjb21tYW5kIC8gY3RybCBiYXNlZCBvbiBPUzpcbiAgICAgIGlmIChjb21ib1NwbGl0W2ldID09PSAnbW9kJykge1xuICAgICAgICBpZiAod2luZG93Lm5hdmlnYXRvciAmJiB3aW5kb3cubmF2aWdhdG9yLnBsYXRmb3JtLmluZGV4T2YoJ01hYycpID49IDApIHtcbiAgICAgICAgICBjb21ib1NwbGl0W2ldID0gJ2NvbW1hbmQnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbWJvU3BsaXRbaV0gPSAnY3RybCc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNvbWJvU3BsaXRbaV0gPSB0aGlzLl9tYXBbY29tYm9TcGxpdFtpXV0gfHwgY29tYm9TcGxpdFtpXTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbWJvU3BsaXQuam9pbignICsgJyk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fc3Vic2NyaXB0aW9uKSB7XG4gICAgICB0aGlzLl9zdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgdG9nZ2xlQ2hlYXRTaGVldCgpOiB2b2lkIHtcbiAgICB0aGlzLmhlbHBWaXNpYmxlID0gIXRoaXMuaGVscFZpc2libGU7XG4gIH1cbn1cbiJdfQ==