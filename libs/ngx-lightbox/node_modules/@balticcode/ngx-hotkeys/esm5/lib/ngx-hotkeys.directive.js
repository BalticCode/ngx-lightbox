/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, ElementRef, Input } from '@angular/core';
import 'mousetrap';
import { NgxHotkeysService } from './ngx-hotkeys.service';
var NgxHotkeysDirective = /** @class */ (function () {
    function NgxHotkeysDirective(_hotkeysService, _elementRef) {
        this._hotkeysService = _hotkeysService;
        this._elementRef = _elementRef;
        this._hotkeysList = [];
        this._oldHotkeys = [];
        this._mousetrapInstance = new Mousetrap(this._elementRef.nativeElement); // Bind hotkeys to the current element (and any children)
    }
    /**
     * @return {?}
     */
    NgxHotkeysDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var e_1, _a;
        try {
            for (var _b = tslib_1.__values(this.hotkeys), _c = _b.next(); !_c.done; _c = _b.next()) {
                var hotkey = _c.value;
                /** @type {?} */
                var combo = Object.keys(hotkey)[0];
                /** @type {?} */
                var hotkeyObj = {
                    combo: combo,
                    handler: hotkey[combo]
                };
                /** @type {?} */
                var filtered = this._hotkeysService.get(combo);
                /** @type {?} */
                var oldHotkey = !!filtered && !!filtered.length ? filtered[0] : null;
                if (oldHotkey !== null) { // We let the user overwrite callbacks temporarily if you specify it in HTML
                    // We let the user overwrite callbacks temporarily if you specify it in HTML
                    this._oldHotkeys.push(oldHotkey);
                    this._hotkeysService.unregister(oldHotkey);
                }
                this._hotkeysList.push(hotkeyObj);
                this._mousetrapInstance.bind(hotkeyObj.combo, hotkeyObj.handler);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    /**
     * @return {?}
     */
    NgxHotkeysDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        var e_2, _a;
        try {
            for (var _b = tslib_1.__values(this._hotkeysList), _c = _b.next(); !_c.done; _c = _b.next()) {
                var hotkey = _c.value;
                this._mousetrapInstance.unbind(hotkey.combo);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        this._hotkeysService.register(this._oldHotkeys);
    };
    NgxHotkeysDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[ngxHotkeys]',
                    providers: [NgxHotkeysService]
                },] }
    ];
    /** @nocollapse */
    NgxHotkeysDirective.ctorParameters = function () { return [
        { type: NgxHotkeysService },
        { type: ElementRef }
    ]; };
    NgxHotkeysDirective.propDecorators = {
        hotkeys: [{ type: Input }]
    };
    return NgxHotkeysDirective;
}());
export { NgxHotkeysDirective };
if (false) {
    /** @type {?} */
    NgxHotkeysDirective.prototype.hotkeys;
    /** @type {?} */
    NgxHotkeysDirective.prototype._mousetrapInstance;
    /** @type {?} */
    NgxHotkeysDirective.prototype._hotkeysList;
    /** @type {?} */
    NgxHotkeysDirective.prototype._oldHotkeys;
    /** @type {?} */
    NgxHotkeysDirective.prototype._hotkeysService;
    /** @type {?} */
    NgxHotkeysDirective.prototype._elementRef;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWhvdGtleXMuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGJhbHRpY2NvZGUvbmd4LWhvdGtleXMvIiwic291cmNlcyI6WyJsaWIvbmd4LWhvdGtleXMuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFvQixNQUFNLGVBQWUsQ0FBQztBQUU5RSxPQUFPLFdBQVcsQ0FBQztBQUduQixPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQzs7SUFldEQsNkJBQW9CLGVBQWtDLEVBQVUsV0FBdUI7UUFBbkUsb0JBQWUsR0FBZixlQUFlLENBQW1CO1FBQVUsZ0JBQVcsR0FBWCxXQUFXLENBQVk7NEJBSHJELEVBQUU7MkJBQ0gsRUFBRTtRQUdqQyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsQ0FBQztLQUN6RTs7OztJQUVELHNDQUFROzs7SUFBUjs7O1lBQ0UsS0FBcUIsSUFBQSxLQUFBLGlCQUFBLElBQUksQ0FBQyxPQUFPLENBQUEsZ0JBQUEsNEJBQUU7Z0JBQTlCLElBQU0sTUFBTSxXQUFBOztnQkFDZixJQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDOztnQkFDckMsSUFBTSxTQUFTLEdBQVk7b0JBQ3pCLEtBQUssRUFBRSxLQUFLO29CQUNaLE9BQU8sRUFBRSxNQUFNLENBQUMsS0FBSyxDQUFDO2lCQUN2QixDQUFDOztnQkFDRixJQUFNLFFBQVEsR0FBYyxJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQzs7Z0JBQzVELElBQU0sU0FBUyxHQUFZLENBQUMsQ0FBQyxRQUFRLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO2dCQUNoRixJQUFJLFNBQVMsS0FBSyxJQUFJLEVBQUUsRUFBRSw0RUFBNEU7O29CQUNwRyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztvQkFDakMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUM7aUJBQzVDO2dCQUNELElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2dCQUNsQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO2FBQ2xFOzs7Ozs7Ozs7S0FDRjs7OztJQUVELHlDQUFXOzs7SUFBWDs7O1lBQ0UsS0FBcUIsSUFBQSxLQUFBLGlCQUFBLElBQUksQ0FBQyxZQUFZLENBQUEsZ0JBQUEsNEJBQUU7Z0JBQW5DLElBQU0sTUFBTSxXQUFBO2dCQUNmLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQzlDOzs7Ozs7Ozs7UUFDRCxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7S0FDakQ7O2dCQXhDRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLGNBQWM7b0JBQ3hCLFNBQVMsRUFBRSxDQUFDLGlCQUFpQixDQUFDO2lCQUMvQjs7OztnQkFMTyxpQkFBaUI7Z0JBTE4sVUFBVTs7OzBCQWExQixLQUFLOzs4QkFiUjs7U0FXYSxtQkFBbUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSW5wdXQsIE9uRGVzdHJveSwgT25Jbml0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCAnbW91c2V0cmFwJztcclxuXHJcbmltcG9ydCB7SG90S2V5TWFwLCBJSG90a2V5fSBmcm9tICcuL2ludGVyZmFjZXMnO1xyXG5pbXBvcnQge05neEhvdGtleXNTZXJ2aWNlfSBmcm9tICcuL25neC1ob3RrZXlzLnNlcnZpY2UnO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6ICdbbmd4SG90a2V5c10nLFxyXG4gIHByb3ZpZGVyczogW05neEhvdGtleXNTZXJ2aWNlXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmd4SG90a2V5c0RpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcclxuXHJcbiAgQElucHV0KClcclxuICBob3RrZXlzOiBIb3RLZXlNYXBbXTtcclxuXHJcbiAgcHJpdmF0ZSBfbW91c2V0cmFwSW5zdGFuY2U6IE1vdXNldHJhcEluc3RhbmNlO1xyXG4gIHByaXZhdGUgX2hvdGtleXNMaXN0OiBJSG90a2V5W10gPSBbXTtcclxuICBwcml2YXRlIF9vbGRIb3RrZXlzOiBJSG90a2V5W10gPSBbXTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfaG90a2V5c1NlcnZpY2U6IE5neEhvdGtleXNTZXJ2aWNlLCBwcml2YXRlIF9lbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7XHJcbiAgICB0aGlzLl9tb3VzZXRyYXBJbnN0YW5jZSA9IG5ldyBNb3VzZXRyYXAodGhpcy5fZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50KTsgLy8gQmluZCBob3RrZXlzIHRvIHRoZSBjdXJyZW50IGVsZW1lbnQgKGFuZCBhbnkgY2hpbGRyZW4pXHJcbiAgfVxyXG5cclxuICBuZ09uSW5pdCgpIHtcclxuICAgIGZvciAoY29uc3QgaG90a2V5IG9mIHRoaXMuaG90a2V5cykge1xyXG4gICAgICBjb25zdCBjb21ibyA9IE9iamVjdC5rZXlzKGhvdGtleSlbMF07XHJcbiAgICAgIGNvbnN0IGhvdGtleU9iajogSUhvdGtleSA9IHtcclxuICAgICAgICBjb21ibzogY29tYm8sXHJcbiAgICAgICAgaGFuZGxlcjogaG90a2V5W2NvbWJvXVxyXG4gICAgICB9O1xyXG4gICAgICBjb25zdCBmaWx0ZXJlZDogSUhvdGtleVtdID0gdGhpcy5faG90a2V5c1NlcnZpY2UuZ2V0KGNvbWJvKTtcclxuICAgICAgY29uc3Qgb2xkSG90a2V5OiBJSG90a2V5ID0gISFmaWx0ZXJlZCAmJiAhIWZpbHRlcmVkLmxlbmd0aCA/IGZpbHRlcmVkWzBdIDogbnVsbDtcclxuICAgICAgaWYgKG9sZEhvdGtleSAhPT0gbnVsbCkgeyAvLyBXZSBsZXQgdGhlIHVzZXIgb3ZlcndyaXRlIGNhbGxiYWNrcyB0ZW1wb3JhcmlseSBpZiB5b3Ugc3BlY2lmeSBpdCBpbiBIVE1MXHJcbiAgICAgICAgdGhpcy5fb2xkSG90a2V5cy5wdXNoKG9sZEhvdGtleSk7XHJcbiAgICAgICAgdGhpcy5faG90a2V5c1NlcnZpY2UudW5yZWdpc3RlcihvbGRIb3RrZXkpO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuX2hvdGtleXNMaXN0LnB1c2goaG90a2V5T2JqKTtcclxuICAgICAgdGhpcy5fbW91c2V0cmFwSW5zdGFuY2UuYmluZChob3RrZXlPYmouY29tYm8sIGhvdGtleU9iai5oYW5kbGVyKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG5nT25EZXN0cm95KCkge1xyXG4gICAgZm9yIChjb25zdCBob3RrZXkgb2YgdGhpcy5faG90a2V5c0xpc3QpIHtcclxuICAgICAgdGhpcy5fbW91c2V0cmFwSW5zdGFuY2UudW5iaW5kKGhvdGtleS5jb21ibyk7XHJcbiAgICB9XHJcbiAgICB0aGlzLl9ob3RrZXlzU2VydmljZS5yZWdpc3Rlcih0aGlzLl9vbGRIb3RrZXlzKTtcclxuICB9XHJcbn1cclxuIl19