(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('mousetrap'), require('rxjs/internal/operators'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('@balticcode/ngx-hotkeys', ['exports', '@angular/core', 'rxjs', 'mousetrap', 'rxjs/internal/operators', '@angular/common'], factory) :
    (factory((global.balticcode = global.balticcode || {}, global.balticcode['ngx-hotkeys'] = {}),global.ng.core,global.rxjs,null,global.rxjs['internal/operators'],global.ng.common));
}(this, (function (exports,core,rxjs,mousetrap,operators,common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var HotkeyOptions = new core.InjectionToken('HotkeyOptions');

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var _defaultOptions = {
        disableCheatSheet: false,
        cheatSheetTitle: 'Keyboard Shortcuts:',
        cheatSheetHotkey: '?',
        cheatSheetHotkeyDescription: 'Show / hide this help menu',
        cheatSheetCloseEsc: false,
        cheatSheetCloseEscDescription: 'Hide this help menu'
    };
    var NgxHotkeysService = /** @class */ (function () {
        function NgxHotkeysService(_options) {
            this._options = _options;
            this._registeredHotkeys = new Set();
            this._pausedHotkeys = new Set();
            this._cheatSheetToggled = new rxjs.Subject();
            this._preventIn = ['INPUT', 'SELECT', 'TEXTAREA'];
            this._serviceOptions = Object.assign(_defaultOptions, this._options);
            Mousetrap.prototype.stopCallback = function (event, element, combo, callback) {
                // if the element has the class "mousetrap" then no need to stop
                if ((' ' + element.className + ' ').indexOf(' mousetrap ') > -1) {
                    return false;
                }
                return (element.contentEditable && element.contentEditable === 'true');
            };
            this._mousetrapInstance = new ( /** @type {?} */(Mousetrap))();
            if (!this._serviceOptions.disableCheatSheet) {
                this.register({
                    combo: this._serviceOptions.cheatSheetHotkey,
                    handler: function (event) {
                        this._cheatSheetToggled.next();
                    }.bind(this),
                    description: this._serviceOptions.cheatSheetHotkeyDescription
                });
            }
            if (this._serviceOptions.cheatSheetCloseEsc) {
                this.register({
                    combo: 'esc',
                    handler: function (event) {
                        this._cheatSheetToggled.next(false);
                    }.bind(this),
                    allowIn: ['HOTKEYS-CHEATSHEET'],
                    description: this._serviceOptions.cheatSheetCloseEscDescription
                });
            }
        }
        Object.defineProperty(NgxHotkeysService.prototype, "hotkeys", {
            get: /**
             * Returns the registered hotkeys as array.
             * @return {?} all registered hotkeys
             */ function () {
                return Array.from(this._registeredHotkeys);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgxHotkeysService.prototype, "cheatSheetToggled", {
            get: /**
             * Returns an Observable stream indicating the cheatsheets visibility was toggled.
             * @return {?} stream indicating the cheatsheets visibility was toggled
             */ function () {
                return this._cheatSheetToggled.asObservable().pipe(operators.share());
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgxHotkeysService.prototype, "options", {
            get: /**
             * @return {?}
             */ function () {
                return this._serviceOptions;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Registers a new hotkey/new hotkeys with it's/their handler(s).
         * @param {?} hotkey hotkeys to listen for
         * @param {?=} unpausing flag indicating if the hotkeys should be unpaused
         * @return {?}
         */
        NgxHotkeysService.prototype.register = /**
         * Registers a new hotkey/new hotkeys with it's/their handler(s).
         * @param {?} hotkey hotkeys to listen for
         * @param {?=} unpausing flag indicating if the hotkeys should be unpaused
         * @return {?}
         */
            function (hotkey, unpausing) {
                var _this = this;
                if (unpausing === void 0) {
                    unpausing = false;
                }
                /** @type {?} */
                var hotkeys = [].concat(hotkey);
                if (unpausing) {
                    hotkeys = Array.from(this._pausedHotkeys);
                }
                hotkeys.forEach(function (h) {
                    if (unpausing) {
                        _this._pausedHotkeys.delete(h);
                    }
                    _this._registeredHotkeys.add(h);
                    _this.bindToMoustrap(h);
                });
            };
        /**
         * Removes a/the registered hotkey(s).
         * @param {?} hotkey hotkey filter
         * @param {?=} pausing flag indicating if the hotkeys should be paused
         * @return {?}
         */
        NgxHotkeysService.prototype.unregister = /**
         * Removes a/the registered hotkey(s).
         * @param {?} hotkey hotkey filter
         * @param {?=} pausing flag indicating if the hotkeys should be paused
         * @return {?}
         */
            function (hotkey, pausing) {
                var _this = this;
                if (pausing === void 0) {
                    pausing = false;
                }
                /** @type {?} */
                var hotkeys = [].concat(hotkey);
                hotkeys.forEach(function (h) {
                    _this._registeredHotkeys.delete(h);
                    if (pausing) {
                        _this._pausedHotkeys.add(h);
                    }
                    _this._mousetrapInstance.unbind(h.combo, h.specificEvent);
                });
            };
        /**
         * Returns all hotkeys matching the passed combo(s).
         * @param {?=} combo combo to match against
         * @return {?} all matched hotkeys
         */
        NgxHotkeysService.prototype.get = /**
         * Returns all hotkeys matching the passed combo(s).
         * @param {?=} combo combo to match against
         * @return {?} all matched hotkeys
         */
            function (combo) {
                return this.hotkeys.filter(function (h) { return h.combo === combo; });
            };
        /**
         * Stops listening for the specified hotkeys.
         * @param {?=} hotkey hotkey filter
         * @return {?}
         */
        NgxHotkeysService.prototype.pause = /**
         * Stops listening for the specified hotkeys.
         * @param {?=} hotkey hotkey filter
         * @return {?}
         */
            function (hotkey) {
                if (!hotkey) {
                    return this.pause(this.hotkeys);
                }
                /** @type {?} */
                var hotkeys = [].concat(hotkey);
                this.unregister(hotkeys, true);
            };
        /**
         * Resumes listening for the specified hotkeys.
         * @param {?=} hotkey hotkey filter
         * @return {?}
         */
        NgxHotkeysService.prototype.unpause = /**
         * Resumes listening for the specified hotkeys.
         * @param {?=} hotkey hotkey filter
         * @return {?}
         */
            function (hotkey) {
                if (!hotkey) {
                    return this.unpause(this.hotkeys);
                }
                /** @type {?} */
                var hotkeys = [].concat(hotkey);
                this.register(hotkeys, true);
            };
        /**
         * Resets all hotkeys.
         * @return {?}
         */
        NgxHotkeysService.prototype.reset = /**
         * Resets all hotkeys.
         * @return {?}
         */
            function () {
                this._mousetrapInstance.reset();
                this._registeredHotkeys.clear();
                this._pausedHotkeys.clear();
            };
        /**
         * @return {?}
         */
        NgxHotkeysService.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.reset();
            };
        /**
         * @param {?} hotkey
         * @return {?}
         */
        NgxHotkeysService.prototype.bindToMoustrap = /**
         * @param {?} hotkey
         * @return {?}
         */
            function (hotkey) {
                var _this = this;
                this._mousetrapInstance.bind(hotkey.combo, function (event, combo) {
                    /** @type {?} */
                    var shouldExecute = true;
                    // if the callback is executed directly `hotkey.get('w').callback()`
                    // there will be no event, so just execute the callback.
                    if (event) {
                        /** @type {?} */
                        var target = /** @type {?} */ ((event.target || event.srcElement));
                        /** @type {?} */
                        var nodeName = target.nodeName.toUpperCase();
                        // check if the input has a mousetrap class, and skip checking preventIn if so
                        if ((' ' + target.className + ' ').indexOf(' mousetrap ') > -1) {
                            shouldExecute = true;
                        }
                        else if (_this._preventIn.indexOf(nodeName) > -1 && hotkey.allowIn.map(function (allow) { return allow.toUpperCase(); }).indexOf(nodeName) === -1) {
                            // don't execute callback if the event was fired from inside an element listed in preventIn but not in allowIn
                            shouldExecute = false;
                        }
                    }
                    if (shouldExecute) {
                        return hotkey.handler.apply(_this, [event, combo]);
                    }
                }, hotkey.specificEvent);
            };
        NgxHotkeysService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        NgxHotkeysService.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: core.Inject, args: [HotkeyOptions,] }] }
            ];
        };
        return NgxHotkeysService;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m)
            return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length)
                    o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgxHotkeysDirective = /** @class */ (function () {
        function NgxHotkeysDirective(_hotkeysService, _elementRef) {
            this._hotkeysService = _hotkeysService;
            this._elementRef = _elementRef;
            this._hotkeysList = [];
            this._oldHotkeys = [];
            this._mousetrapInstance = new Mousetrap(this._elementRef.nativeElement); // Bind hotkeys to the current element (and any children)
        }
        /**
         * @return {?}
         */
        NgxHotkeysDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var e_1, _a;
                try {
                    for (var _b = __values(this.hotkeys), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var hotkey = _c.value;
                        /** @type {?} */
                        var combo = Object.keys(hotkey)[0];
                        /** @type {?} */
                        var hotkeyObj = {
                            combo: combo,
                            handler: hotkey[combo]
                        };
                        /** @type {?} */
                        var filtered = this._hotkeysService.get(combo);
                        /** @type {?} */
                        var oldHotkey = !!filtered && !!filtered.length ? filtered[0] : null;
                        if (oldHotkey !== null) { // We let the user overwrite callbacks temporarily if you specify it in HTML
                            // We let the user overwrite callbacks temporarily if you specify it in HTML
                            this._oldHotkeys.push(oldHotkey);
                            this._hotkeysService.unregister(oldHotkey);
                        }
                        this._hotkeysList.push(hotkeyObj);
                        this._mousetrapInstance.bind(hotkeyObj.combo, hotkeyObj.handler);
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return))
                            _a.call(_b);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
            };
        /**
         * @return {?}
         */
        NgxHotkeysDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                var e_2, _a;
                try {
                    for (var _b = __values(this._hotkeysList), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var hotkey = _c.value;
                        this._mousetrapInstance.unbind(hotkey.combo);
                    }
                }
                catch (e_2_1) {
                    e_2 = { error: e_2_1 };
                }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return))
                            _a.call(_b);
                    }
                    finally {
                        if (e_2)
                            throw e_2.error;
                    }
                }
                this._hotkeysService.register(this._oldHotkeys);
            };
        NgxHotkeysDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[ngxHotkeys]',
                        providers: [NgxHotkeysService]
                    },] }
        ];
        /** @nocollapse */
        NgxHotkeysDirective.ctorParameters = function () {
            return [
                { type: NgxHotkeysService },
                { type: core.ElementRef }
            ];
        };
        NgxHotkeysDirective.propDecorators = {
            hotkeys: [{ type: core.Input }]
        };
        return NgxHotkeysDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgxCheatsheetComponent = /** @class */ (function () {
        function NgxCheatsheetComponent(hotkeysService) {
            this.hotkeysService = hotkeysService;
            this.helpVisible = false;
            this._map = {
                command: '\u2318',
                // ⌘
                shift: '\u21E7',
                // ⇧
                left: '\u2190',
                // ←
                right: '\u2192',
                // →
                up: '\u2191',
                // ↑
                down: '\u2193',
                // ↓
                'return': '\u23CE',
                // ⏎
                backspace: '\u232B' // ⌫
            };
            this.title = this.hotkeysService.options.cheatSheetTitle;
        }
        /**
         * @return {?}
         */
        NgxCheatsheetComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this._subscription = this.hotkeysService.cheatSheetToggled
                    .subscribe(function (isOpen) {
                    if (isOpen !== false) {
                        _this.hotkeys = _this.hotkeysService.hotkeys
                            .filter(function (hotkey) { return hotkey.description; });
                    }
                    if (isOpen === false) {
                        _this.helpVisible = false;
                    }
                    else {
                        _this.toggleCheatSheet();
                    }
                });
            };
        /**
         * @param {?} hotkey
         * @return {?}
         */
        NgxCheatsheetComponent.prototype.formatHotkey = /**
         * @param {?} hotkey
         * @return {?}
         */
            function (hotkey) {
                if (!hotkey.format) {
                    /** @type {?} */
                    var combo = Array.isArray(hotkey.combo) ? hotkey.combo[0] : hotkey.combo;
                    /** @type {?} */
                    var sequence = combo.split(/[\s]/);
                    for (var i = 0; i < sequence.length; i++) {
                        sequence[i] = this.symbolize(sequence[i]);
                    }
                    hotkey.format = sequence;
                }
                return hotkey.format;
            };
        /**
         * @param {?} combo
         * @return {?}
         */
        NgxCheatsheetComponent.prototype.symbolize = /**
         * @param {?} combo
         * @return {?}
         */
            function (combo) {
                /** @type {?} */
                var comboSplit = combo.split('+');
                for (var i = 0; i < comboSplit.length; i++) {
                    // try to resolve command / ctrl based on OS:
                    if (comboSplit[i] === 'mod') {
                        if (window.navigator && window.navigator.platform.indexOf('Mac') >= 0) {
                            comboSplit[i] = 'command';
                        }
                        else {
                            comboSplit[i] = 'ctrl';
                        }
                    }
                    comboSplit[i] = this._map[comboSplit[i]] || comboSplit[i];
                }
                return comboSplit.join(' + ');
            };
        /**
         * @return {?}
         */
        NgxCheatsheetComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this._subscription) {
                    this._subscription.unsubscribe();
                }
            };
        /**
         * @return {?}
         */
        NgxCheatsheetComponent.prototype.toggleCheatSheet = /**
         * @return {?}
         */
            function () {
                this.helpVisible = !this.helpVisible;
            };
        NgxCheatsheetComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ngx-cheatsheet',
                        template: "<div class=\"ngx-cheatsheet fade\" [ngClass]=\"{'in': helpVisible}\" style=\"display:none\">\n  <div class=\"ngx-cheatsheet__hotkeys\">\n    <h4 class=\"ngx-cheatsheet__hotkeys__title\">{{ title }}</h4>\n    <table>\n      <tbody>\n      <tr *ngFor=\"let hotkey of hotkeys\">\n        <td class=\"ngx-cheatsheet__hotkeys__keys\">\n          <span class=\"ngx-cheatsheet__hotkeys__keys__key\">{{ formatHotkey(hotkey) }}</span>\n        </td>\n        <td class=\"ngx-cheatsheet__hotkeys__keys__text\">{{ hotkey.description }}</td>\n      </tr>\n      </tbody>\n    </table>\n    <div class=\"ngx-cheatsheet__hotkeys__close\" (click)=\"toggleCheatSheet()\">&#215;</div>\n  </div>\n</div>\n",
                        styles: [".ngx-cheatsheet{display:table!important;position:fixed;width:100%;height:100%;top:0;left:0;color:#333;font-size:1em;background-color:rgba(255,255,255,.9)}.ngx-cheatsheet.fade{z-index:-1024;visibility:hidden;opacity:0;transition:opacity .15s linear}.ngx-cheatsheet.fade.in{z-index:10002;visibility:visible;opacity:1}.ngx-cheatsheet__hotkeys{width:100%;height:100%;display:table-cell;vertical-align:middle}.ngx-cheatsheet__hotkeys__title{font-weight:700;text-align:center;font-size:1.2em}.ngx-cheatsheet__hotkeys table{margin:auto;color:#333}.ngx-cheatsheet__hotkeys__keys{padding:5px;text-align:right}.ngx-cheatsheet__hotkeys__keys__key{display:inline-block;color:#fff;background-color:#333;border:1px solid #333;border-radius:5px;text-align:center;margin-right:5px;box-shadow:inset 0 1px 0 #666,0 1px 0 #bbb;padding:5px 9px;font-size:1em}.ngx-cheatsheet__hotkeys__keys__text{padding-left:10px;font-size:1em}.ngx-cheatsheet__hotkeys__close{position:fixed;top:20px;right:20px;font-size:2em;font-weight:700;padding:5px 10px;border:1px solid #ddd;border-radius:5px;min-height:45px;min-width:45px;text-align:center}@media all and (max-width:500px){.ngx-cheatsheet__hotkeys{font-size:.8em}}@media all and (min-width:750px){.ngx-cheatsheet__hotkeys{font-size:1.2em}}"]
                    }] }
        ];
        /** @nocollapse */
        NgxCheatsheetComponent.ctorParameters = function () {
            return [
                { type: NgxHotkeysService }
            ];
        };
        NgxCheatsheetComponent.propDecorators = {
            title: [{ type: core.Input }]
        };
        return NgxCheatsheetComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgxHotkeysModule = /** @class */ (function () {
        function NgxHotkeysModule() {
        }
        /**
         * @param {?=} options
         * @return {?}
         */
        NgxHotkeysModule.forRoot = /**
         * @param {?=} options
         * @return {?}
         */
            function (options) {
                return {
                    ngModule: NgxHotkeysModule,
                    providers: [
                        NgxHotkeysService,
                        { provide: HotkeyOptions, useValue: options }
                    ]
                };
            };
        NgxHotkeysModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [common.CommonModule],
                        declarations: [NgxCheatsheetComponent, NgxHotkeysDirective],
                        exports: [NgxHotkeysDirective, NgxCheatsheetComponent],
                        providers: [NgxHotkeysService]
                    },] }
        ];
        return NgxHotkeysModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.NgxHotkeysService = NgxHotkeysService;
    exports.NgxHotkeysDirective = NgxHotkeysDirective;
    exports.NgxCheatsheetComponent = NgxCheatsheetComponent;
    exports.NgxHotkeysModule = NgxHotkeysModule;
    exports.ɵa = HotkeyOptions;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,