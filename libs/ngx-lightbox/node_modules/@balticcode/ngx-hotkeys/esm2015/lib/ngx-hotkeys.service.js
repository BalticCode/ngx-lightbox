/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Inject, Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import 'mousetrap';
import { HotkeyOptions } from './token';
import { share } from 'rxjs/internal/operators';
/** @type {?} */
const _defaultOptions = {
    disableCheatSheet: false,
    cheatSheetTitle: 'Keyboard Shortcuts:',
    cheatSheetHotkey: '?',
    cheatSheetHotkeyDescription: 'Show / hide this help menu',
    cheatSheetCloseEsc: false,
    cheatSheetCloseEscDescription: 'Hide this help menu'
};
export class NgxHotkeysService {
    /**
     * @param {?} _options
     */
    constructor(_options) {
        this._options = _options;
        this._registeredHotkeys = new Set();
        this._pausedHotkeys = new Set();
        this._cheatSheetToggled = new Subject();
        this._preventIn = ['INPUT', 'SELECT', 'TEXTAREA'];
        this._serviceOptions = Object.assign(_defaultOptions, this._options);
        Mousetrap.prototype.stopCallback = (event, element, combo, callback) => {
            // if the element has the class "mousetrap" then no need to stop
            if ((' ' + element.className + ' ').indexOf(' mousetrap ') > -1) {
                return false;
            }
            return (element.contentEditable && element.contentEditable === 'true');
        };
        this._mousetrapInstance = new (/** @type {?} */ (Mousetrap))();
        if (!this._serviceOptions.disableCheatSheet) {
            this.register({
                combo: this._serviceOptions.cheatSheetHotkey,
                handler: function (event) {
                    this._cheatSheetToggled.next();
                }.bind(this),
                description: this._serviceOptions.cheatSheetHotkeyDescription
            });
        }
        if (this._serviceOptions.cheatSheetCloseEsc) {
            this.register({
                combo: 'esc',
                handler: function (event) {
                    this._cheatSheetToggled.next(false);
                }.bind(this),
                allowIn: ['HOTKEYS-CHEATSHEET'],
                description: this._serviceOptions.cheatSheetCloseEscDescription
            });
        }
    }
    /**
     * Returns the registered hotkeys as array.
     * @return {?} all registered hotkeys
     */
    get hotkeys() {
        return Array.from(this._registeredHotkeys);
    }
    /**
     * Returns an Observable stream indicating the cheatsheets visibility was toggled.
     * @return {?} stream indicating the cheatsheets visibility was toggled
     */
    get cheatSheetToggled() {
        return this._cheatSheetToggled.asObservable().pipe(share());
    }
    /**
     * @return {?}
     */
    get options() {
        return this._serviceOptions;
    }
    /**
     * Registers a new hotkey/new hotkeys with it's/their handler(s).
     * @param {?} hotkey hotkeys to listen for
     * @param {?=} unpausing flag indicating if the hotkeys should be unpaused
     * @return {?}
     */
    register(hotkey, unpausing = false) {
        /** @type {?} */
        let hotkeys = [].concat(hotkey);
        if (unpausing) {
            hotkeys = Array.from(this._pausedHotkeys);
        }
        hotkeys.forEach(h => {
            if (unpausing) {
                this._pausedHotkeys.delete(h);
            }
            this._registeredHotkeys.add(h);
            this.bindToMoustrap(h);
        });
    }
    /**
     * Removes a/the registered hotkey(s).
     * @param {?} hotkey hotkey filter
     * @param {?=} pausing flag indicating if the hotkeys should be paused
     * @return {?}
     */
    unregister(hotkey, pausing = false) {
        /** @type {?} */
        const hotkeys = [].concat(hotkey);
        hotkeys.forEach(h => {
            this._registeredHotkeys.delete(h);
            if (pausing) {
                this._pausedHotkeys.add(h);
            }
            this._mousetrapInstance.unbind(h.combo, h.specificEvent);
        });
    }
    /**
     * Returns all hotkeys matching the passed combo(s).
     * @param {?=} combo combo to match against
     * @return {?} all matched hotkeys
     */
    get(combo) {
        return this.hotkeys.filter(h => h.combo === combo);
    }
    /**
     * Stops listening for the specified hotkeys.
     * @param {?=} hotkey hotkey filter
     * @return {?}
     */
    pause(hotkey) {
        if (!hotkey) {
            return this.pause(this.hotkeys);
        }
        /** @type {?} */
        const hotkeys = [].concat(hotkey);
        this.unregister(hotkeys, true);
    }
    /**
     * Resumes listening for the specified hotkeys.
     * @param {?=} hotkey hotkey filter
     * @return {?}
     */
    unpause(hotkey) {
        if (!hotkey) {
            return this.unpause(this.hotkeys);
        }
        /** @type {?} */
        const hotkeys = [].concat(hotkey);
        this.register(hotkeys, true);
    }
    /**
     * Resets all hotkeys.
     * @return {?}
     */
    reset() {
        this._mousetrapInstance.reset();
        this._registeredHotkeys.clear();
        this._pausedHotkeys.clear();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.reset();
    }
    /**
     * @param {?} hotkey
     * @return {?}
     */
    bindToMoustrap(hotkey) {
        this._mousetrapInstance.bind(hotkey.combo, (event, combo) => {
            /** @type {?} */
            let shouldExecute = true;
            // if the callback is executed directly `hotkey.get('w').callback()`
            // there will be no event, so just execute the callback.
            if (event) {
                /** @type {?} */
                const target = /** @type {?} */ ((event.target || event.srcElement));
                /** @type {?} */
                const nodeName = target.nodeName.toUpperCase();
                // check if the input has a mousetrap class, and skip checking preventIn if so
                if ((' ' + target.className + ' ').indexOf(' mousetrap ') > -1) {
                    shouldExecute = true;
                }
                else if (this._preventIn.indexOf(nodeName) > -1 && hotkey.allowIn.map(allow => allow.toUpperCase()).indexOf(nodeName) === -1) {
                    // don't execute callback if the event was fired from inside an element listed in preventIn but not in allowIn
                    shouldExecute = false;
                }
            }
            if (shouldExecute) {
                return hotkey.handler.apply(this, [event, combo]);
            }
        }, hotkey.specificEvent);
    }
}
NgxHotkeysService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
NgxHotkeysService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [HotkeyOptions,] }] }
];
if (false) {
    /** @type {?} */
    NgxHotkeysService.prototype._serviceOptions;
    /** @type {?} */
    NgxHotkeysService.prototype._registeredHotkeys;
    /** @type {?} */
    NgxHotkeysService.prototype._pausedHotkeys;
    /** @type {?} */
    NgxHotkeysService.prototype._mousetrapInstance;
    /** @type {?} */
    NgxHotkeysService.prototype._cheatSheetToggled;
    /** @type {?} */
    NgxHotkeysService.prototype._preventIn;
    /** @type {?} */
    NgxHotkeysService.prototype._options;
}

//# sourceMappingURL=data:application/json;base64,