/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Input } from '@angular/core';
import 'mousetrap';
import { NgxHotkeysService } from './ngx-hotkeys.service';
export class NgxHotkeysDirective {
    /**
     * @param {?} _hotkeysService
     * @param {?} _elementRef
     */
    constructor(_hotkeysService, _elementRef) {
        this._hotkeysService = _hotkeysService;
        this._elementRef = _elementRef;
        this._hotkeysList = [];
        this._oldHotkeys = [];
        this._mousetrapInstance = new Mousetrap(this._elementRef.nativeElement); // Bind hotkeys to the current element (and any children)
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        for (const hotkey of this.hotkeys) {
            /** @type {?} */
            const combo = Object.keys(hotkey)[0];
            /** @type {?} */
            const hotkeyObj = {
                combo: combo,
                handler: hotkey[combo]
            };
            /** @type {?} */
            const filtered = this._hotkeysService.get(combo);
            /** @type {?} */
            const oldHotkey = !!filtered && !!filtered.length ? filtered[0] : null;
            if (oldHotkey !== null) { // We let the user overwrite callbacks temporarily if you specify it in HTML
                // We let the user overwrite callbacks temporarily if you specify it in HTML
                this._oldHotkeys.push(oldHotkey);
                this._hotkeysService.unregister(oldHotkey);
            }
            this._hotkeysList.push(hotkeyObj);
            this._mousetrapInstance.bind(hotkeyObj.combo, hotkeyObj.handler);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        for (const hotkey of this._hotkeysList) {
            this._mousetrapInstance.unbind(hotkey.combo);
        }
        this._hotkeysService.register(this._oldHotkeys);
    }
}
NgxHotkeysDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ngxHotkeys]',
                providers: [NgxHotkeysService]
            },] }
];
/** @nocollapse */
NgxHotkeysDirective.ctorParameters = () => [
    { type: NgxHotkeysService },
    { type: ElementRef }
];
NgxHotkeysDirective.propDecorators = {
    hotkeys: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    NgxHotkeysDirective.prototype.hotkeys;
    /** @type {?} */
    NgxHotkeysDirective.prototype._mousetrapInstance;
    /** @type {?} */
    NgxHotkeysDirective.prototype._hotkeysList;
    /** @type {?} */
    NgxHotkeysDirective.prototype._oldHotkeys;
    /** @type {?} */
    NgxHotkeysDirective.prototype._hotkeysService;
    /** @type {?} */
    NgxHotkeysDirective.prototype._elementRef;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWhvdGtleXMuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGJhbHRpY2NvZGUvbmd4LWhvdGtleXMvIiwic291cmNlcyI6WyJsaWIvbmd4LWhvdGtleXMuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQW9CLE1BQU0sZUFBZSxDQUFDO0FBRTlFLE9BQU8sV0FBVyxDQUFDO0FBR25CLE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBTXhELE1BQU07Ozs7O0lBU0osWUFBb0IsZUFBa0MsRUFBVSxXQUF1QjtRQUFuRSxvQkFBZSxHQUFmLGVBQWUsQ0FBbUI7UUFBVSxnQkFBVyxHQUFYLFdBQVcsQ0FBWTs0QkFIckQsRUFBRTsyQkFDSCxFQUFFO1FBR2pDLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLFNBQVMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0tBQ3pFOzs7O0lBRUQsUUFBUTtRQUNOLEtBQUssTUFBTSxNQUFNLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTs7WUFDakMsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7WUFDckMsTUFBTSxTQUFTLEdBQVk7Z0JBQ3pCLEtBQUssRUFBRSxLQUFLO2dCQUNaLE9BQU8sRUFBRSxNQUFNLENBQUMsS0FBSyxDQUFDO2FBQ3ZCLENBQUM7O1lBQ0YsTUFBTSxRQUFRLEdBQWMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7O1lBQzVELE1BQU0sU0FBUyxHQUFZLENBQUMsQ0FBQyxRQUFRLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQ2hGLElBQUksU0FBUyxLQUFLLElBQUksRUFBRSxFQUFFLDRFQUE0RTs7Z0JBQ3BHLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2dCQUNqQyxJQUFJLENBQUMsZUFBZSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQzthQUM1QztZQUNELElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQ2xDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDbEU7S0FDRjs7OztJQUVELFdBQVc7UUFDVCxLQUFLLE1BQU0sTUFBTSxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDdEMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDOUM7UUFDRCxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7S0FDakQ7OztZQXhDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGNBQWM7Z0JBQ3hCLFNBQVMsRUFBRSxDQUFDLGlCQUFpQixDQUFDO2FBQy9COzs7O1lBTE8saUJBQWlCO1lBTE4sVUFBVTs7O3NCQWExQixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIElucHV0LCBPbkRlc3Ryb3ksIE9uSW5pdH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5pbXBvcnQgJ21vdXNldHJhcCc7XHJcblxyXG5pbXBvcnQge0hvdEtleU1hcCwgSUhvdGtleX0gZnJvbSAnLi9pbnRlcmZhY2VzJztcclxuaW1wb3J0IHtOZ3hIb3RrZXlzU2VydmljZX0gZnJvbSAnLi9uZ3gtaG90a2V5cy5zZXJ2aWNlJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnW25neEhvdGtleXNdJyxcclxuICBwcm92aWRlcnM6IFtOZ3hIb3RrZXlzU2VydmljZV1cclxufSlcclxuZXhwb3J0IGNsYXNzIE5neEhvdGtleXNEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgaG90a2V5czogSG90S2V5TWFwW107XHJcblxyXG4gIHByaXZhdGUgX21vdXNldHJhcEluc3RhbmNlOiBNb3VzZXRyYXBJbnN0YW5jZTtcclxuICBwcml2YXRlIF9ob3RrZXlzTGlzdDogSUhvdGtleVtdID0gW107XHJcbiAgcHJpdmF0ZSBfb2xkSG90a2V5czogSUhvdGtleVtdID0gW107XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX2hvdGtleXNTZXJ2aWNlOiBOZ3hIb3RrZXlzU2VydmljZSwgcHJpdmF0ZSBfZWxlbWVudFJlZjogRWxlbWVudFJlZikge1xyXG4gICAgdGhpcy5fbW91c2V0cmFwSW5zdGFuY2UgPSBuZXcgTW91c2V0cmFwKHRoaXMuX2VsZW1lbnRSZWYubmF0aXZlRWxlbWVudCk7IC8vIEJpbmQgaG90a2V5cyB0byB0aGUgY3VycmVudCBlbGVtZW50IChhbmQgYW55IGNoaWxkcmVuKVxyXG4gIH1cclxuXHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgICBmb3IgKGNvbnN0IGhvdGtleSBvZiB0aGlzLmhvdGtleXMpIHtcclxuICAgICAgY29uc3QgY29tYm8gPSBPYmplY3Qua2V5cyhob3RrZXkpWzBdO1xyXG4gICAgICBjb25zdCBob3RrZXlPYmo6IElIb3RrZXkgPSB7XHJcbiAgICAgICAgY29tYm86IGNvbWJvLFxyXG4gICAgICAgIGhhbmRsZXI6IGhvdGtleVtjb21ib11cclxuICAgICAgfTtcclxuICAgICAgY29uc3QgZmlsdGVyZWQ6IElIb3RrZXlbXSA9IHRoaXMuX2hvdGtleXNTZXJ2aWNlLmdldChjb21ibyk7XHJcbiAgICAgIGNvbnN0IG9sZEhvdGtleTogSUhvdGtleSA9ICEhZmlsdGVyZWQgJiYgISFmaWx0ZXJlZC5sZW5ndGggPyBmaWx0ZXJlZFswXSA6IG51bGw7XHJcbiAgICAgIGlmIChvbGRIb3RrZXkgIT09IG51bGwpIHsgLy8gV2UgbGV0IHRoZSB1c2VyIG92ZXJ3cml0ZSBjYWxsYmFja3MgdGVtcG9yYXJpbHkgaWYgeW91IHNwZWNpZnkgaXQgaW4gSFRNTFxyXG4gICAgICAgIHRoaXMuX29sZEhvdGtleXMucHVzaChvbGRIb3RrZXkpO1xyXG4gICAgICAgIHRoaXMuX2hvdGtleXNTZXJ2aWNlLnVucmVnaXN0ZXIob2xkSG90a2V5KTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLl9ob3RrZXlzTGlzdC5wdXNoKGhvdGtleU9iaik7XHJcbiAgICAgIHRoaXMuX21vdXNldHJhcEluc3RhbmNlLmJpbmQoaG90a2V5T2JqLmNvbWJvLCBob3RrZXlPYmouaGFuZGxlcik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBuZ09uRGVzdHJveSgpIHtcclxuICAgIGZvciAoY29uc3QgaG90a2V5IG9mIHRoaXMuX2hvdGtleXNMaXN0KSB7XHJcbiAgICAgIHRoaXMuX21vdXNldHJhcEluc3RhbmNlLnVuYmluZChob3RrZXkuY29tYm8pO1xyXG4gICAgfVxyXG4gICAgdGhpcy5faG90a2V5c1NlcnZpY2UucmVnaXN0ZXIodGhpcy5fb2xkSG90a2V5cyk7XHJcbiAgfVxyXG59XHJcbiJdfQ==