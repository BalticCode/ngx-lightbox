import { InjectionToken, Inject, Injectable, Directive, ElementRef, Input, Component, NgModule } from '@angular/core';
import { Subject } from 'rxjs';
import 'mousetrap';
import { share } from 'rxjs/internal/operators';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
const HotkeyOptions = new InjectionToken('HotkeyOptions');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
const _defaultOptions = {
    disableCheatSheet: false,
    cheatSheetTitle: 'Keyboard Shortcuts:',
    cheatSheetHotkey: '?',
    cheatSheetHotkeyDescription: 'Show / hide this help menu',
    cheatSheetCloseEsc: false,
    cheatSheetCloseEscDescription: 'Hide this help menu'
};
class NgxHotkeysService {
    /**
     * @param {?} _options
     */
    constructor(_options) {
        this._options = _options;
        this._registeredHotkeys = new Set();
        this._pausedHotkeys = new Set();
        this._cheatSheetToggled = new Subject();
        this._preventIn = ['INPUT', 'SELECT', 'TEXTAREA'];
        this._serviceOptions = Object.assign(_defaultOptions, this._options);
        Mousetrap.prototype.stopCallback = (event, element, combo, callback) => {
            // if the element has the class "mousetrap" then no need to stop
            if ((' ' + element.className + ' ').indexOf(' mousetrap ') > -1) {
                return false;
            }
            return (element.contentEditable && element.contentEditable === 'true');
        };
        this._mousetrapInstance = new (/** @type {?} */ (Mousetrap))();
        if (!this._serviceOptions.disableCheatSheet) {
            this.register({
                combo: this._serviceOptions.cheatSheetHotkey,
                handler: function (event) {
                    this._cheatSheetToggled.next();
                }.bind(this),
                description: this._serviceOptions.cheatSheetHotkeyDescription
            });
        }
        if (this._serviceOptions.cheatSheetCloseEsc) {
            this.register({
                combo: 'esc',
                handler: function (event) {
                    this._cheatSheetToggled.next(false);
                }.bind(this),
                allowIn: ['HOTKEYS-CHEATSHEET'],
                description: this._serviceOptions.cheatSheetCloseEscDescription
            });
        }
    }
    /**
     * Returns the registered hotkeys as array.
     * @return {?} all registered hotkeys
     */
    get hotkeys() {
        return Array.from(this._registeredHotkeys);
    }
    /**
     * Returns an Observable stream indicating the cheatsheets visibility was toggled.
     * @return {?} stream indicating the cheatsheets visibility was toggled
     */
    get cheatSheetToggled() {
        return this._cheatSheetToggled.asObservable().pipe(share());
    }
    /**
     * @return {?}
     */
    get options() {
        return this._serviceOptions;
    }
    /**
     * Registers a new hotkey/new hotkeys with it's/their handler(s).
     * @param {?} hotkey hotkeys to listen for
     * @param {?=} unpausing flag indicating if the hotkeys should be unpaused
     * @return {?}
     */
    register(hotkey, unpausing = false) {
        /** @type {?} */
        let hotkeys = [].concat(hotkey);
        if (unpausing) {
            hotkeys = Array.from(this._pausedHotkeys);
        }
        hotkeys.forEach(h => {
            if (unpausing) {
                this._pausedHotkeys.delete(h);
            }
            this._registeredHotkeys.add(h);
            this.bindToMoustrap(h);
        });
    }
    /**
     * Removes a/the registered hotkey(s).
     * @param {?} hotkey hotkey filter
     * @param {?=} pausing flag indicating if the hotkeys should be paused
     * @return {?}
     */
    unregister(hotkey, pausing = false) {
        /** @type {?} */
        const hotkeys = [].concat(hotkey);
        hotkeys.forEach(h => {
            this._registeredHotkeys.delete(h);
            if (pausing) {
                this._pausedHotkeys.add(h);
            }
            this._mousetrapInstance.unbind(h.combo, h.specificEvent);
        });
    }
    /**
     * Returns all hotkeys matching the passed combo(s).
     * @param {?=} combo combo to match against
     * @return {?} all matched hotkeys
     */
    get(combo) {
        return this.hotkeys.filter(h => h.combo === combo);
    }
    /**
     * Stops listening for the specified hotkeys.
     * @param {?=} hotkey hotkey filter
     * @return {?}
     */
    pause(hotkey) {
        if (!hotkey) {
            return this.pause(this.hotkeys);
        }
        /** @type {?} */
        const hotkeys = [].concat(hotkey);
        this.unregister(hotkeys, true);
    }
    /**
     * Resumes listening for the specified hotkeys.
     * @param {?=} hotkey hotkey filter
     * @return {?}
     */
    unpause(hotkey) {
        if (!hotkey) {
            return this.unpause(this.hotkeys);
        }
        /** @type {?} */
        const hotkeys = [].concat(hotkey);
        this.register(hotkeys, true);
    }
    /**
     * Resets all hotkeys.
     * @return {?}
     */
    reset() {
        this._mousetrapInstance.reset();
        this._registeredHotkeys.clear();
        this._pausedHotkeys.clear();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.reset();
    }
    /**
     * @param {?} hotkey
     * @return {?}
     */
    bindToMoustrap(hotkey) {
        this._mousetrapInstance.bind(hotkey.combo, (event, combo) => {
            /** @type {?} */
            let shouldExecute = true;
            // if the callback is executed directly `hotkey.get('w').callback()`
            // there will be no event, so just execute the callback.
            if (event) {
                /** @type {?} */
                const target = /** @type {?} */ ((event.target || event.srcElement));
                /** @type {?} */
                const nodeName = target.nodeName.toUpperCase();
                // check if the input has a mousetrap class, and skip checking preventIn if so
                if ((' ' + target.className + ' ').indexOf(' mousetrap ') > -1) {
                    shouldExecute = true;
                }
                else if (this._preventIn.indexOf(nodeName) > -1 && hotkey.allowIn.map(allow => allow.toUpperCase()).indexOf(nodeName) === -1) {
                    // don't execute callback if the event was fired from inside an element listed in preventIn but not in allowIn
                    shouldExecute = false;
                }
            }
            if (shouldExecute) {
                return hotkey.handler.apply(this, [event, combo]);
            }
        }, hotkey.specificEvent);
    }
}
NgxHotkeysService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
NgxHotkeysService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [HotkeyOptions,] }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class NgxHotkeysDirective {
    /**
     * @param {?} _hotkeysService
     * @param {?} _elementRef
     */
    constructor(_hotkeysService, _elementRef) {
        this._hotkeysService = _hotkeysService;
        this._elementRef = _elementRef;
        this._hotkeysList = [];
        this._oldHotkeys = [];
        this._mousetrapInstance = new Mousetrap(this._elementRef.nativeElement); // Bind hotkeys to the current element (and any children)
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        for (const hotkey of this.hotkeys) {
            /** @type {?} */
            const combo = Object.keys(hotkey)[0];
            /** @type {?} */
            const hotkeyObj = {
                combo: combo,
                handler: hotkey[combo]
            };
            /** @type {?} */
            const filtered = this._hotkeysService.get(combo);
            /** @type {?} */
            const oldHotkey = !!filtered && !!filtered.length ? filtered[0] : null;
            if (oldHotkey !== null) { // We let the user overwrite callbacks temporarily if you specify it in HTML
                // We let the user overwrite callbacks temporarily if you specify it in HTML
                this._oldHotkeys.push(oldHotkey);
                this._hotkeysService.unregister(oldHotkey);
            }
            this._hotkeysList.push(hotkeyObj);
            this._mousetrapInstance.bind(hotkeyObj.combo, hotkeyObj.handler);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        for (const hotkey of this._hotkeysList) {
            this._mousetrapInstance.unbind(hotkey.combo);
        }
        this._hotkeysService.register(this._oldHotkeys);
    }
}
NgxHotkeysDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ngxHotkeys]',
                providers: [NgxHotkeysService]
            },] }
];
/** @nocollapse */
NgxHotkeysDirective.ctorParameters = () => [
    { type: NgxHotkeysService },
    { type: ElementRef }
];
NgxHotkeysDirective.propDecorators = {
    hotkeys: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class NgxCheatsheetComponent {
    /**
     * @param {?} hotkeysService
     */
    constructor(hotkeysService) {
        this.hotkeysService = hotkeysService;
        this.helpVisible = false;
        this._map = {
            command: '\u2318',
            // ⌘
            shift: '\u21E7',
            // ⇧
            left: '\u2190',
            // ←
            right: '\u2192',
            // →
            up: '\u2191',
            // ↑
            down: '\u2193',
            // ↓
            'return': '\u23CE',
            // ⏎
            backspace: '\u232B' // ⌫
        };
        this.title = this.hotkeysService.options.cheatSheetTitle;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._subscription = this.hotkeysService.cheatSheetToggled
            .subscribe((isOpen) => {
            if (isOpen !== false) {
                this.hotkeys = this.hotkeysService.hotkeys
                    .filter(hotkey => hotkey.description);
            }
            if (isOpen === false) {
                this.helpVisible = false;
            }
            else {
                this.toggleCheatSheet();
            }
        });
    }
    /**
     * @param {?} hotkey
     * @return {?}
     */
    formatHotkey(hotkey) {
        if (!hotkey.format) {
            /** @type {?} */
            const combo = Array.isArray(hotkey.combo) ? hotkey.combo[0] : hotkey.combo;
            /** @type {?} */
            const sequence = combo.split(/[\s]/);
            for (let i = 0; i < sequence.length; i++) {
                sequence[i] = this.symbolize(sequence[i]);
            }
            hotkey.format = sequence;
        }
        return hotkey.format;
    }
    /**
     * @param {?} combo
     * @return {?}
     */
    symbolize(combo) {
        /** @type {?} */
        const comboSplit = combo.split('+');
        for (let i = 0; i < comboSplit.length; i++) {
            // try to resolve command / ctrl based on OS:
            if (comboSplit[i] === 'mod') {
                if (window.navigator && window.navigator.platform.indexOf('Mac') >= 0) {
                    comboSplit[i] = 'command';
                }
                else {
                    comboSplit[i] = 'ctrl';
                }
            }
            comboSplit[i] = this._map[comboSplit[i]] || comboSplit[i];
        }
        return comboSplit.join(' + ');
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this._subscription) {
            this._subscription.unsubscribe();
        }
    }
    /**
     * @return {?}
     */
    toggleCheatSheet() {
        this.helpVisible = !this.helpVisible;
    }
}
NgxCheatsheetComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-cheatsheet',
                template: "<div class=\"ngx-cheatsheet fade\" [ngClass]=\"{'in': helpVisible}\" style=\"display:none\">\n  <div class=\"ngx-cheatsheet__hotkeys\">\n    <h4 class=\"ngx-cheatsheet__hotkeys__title\">{{ title }}</h4>\n    <table>\n      <tbody>\n      <tr *ngFor=\"let hotkey of hotkeys\">\n        <td class=\"ngx-cheatsheet__hotkeys__keys\">\n          <span class=\"ngx-cheatsheet__hotkeys__keys__key\">{{ formatHotkey(hotkey) }}</span>\n        </td>\n        <td class=\"ngx-cheatsheet__hotkeys__keys__text\">{{ hotkey.description }}</td>\n      </tr>\n      </tbody>\n    </table>\n    <div class=\"ngx-cheatsheet__hotkeys__close\" (click)=\"toggleCheatSheet()\">&#215;</div>\n  </div>\n</div>\n",
                styles: [".ngx-cheatsheet{display:table!important;position:fixed;width:100%;height:100%;top:0;left:0;color:#333;font-size:1em;background-color:rgba(255,255,255,.9)}.ngx-cheatsheet.fade{z-index:-1024;visibility:hidden;opacity:0;transition:opacity .15s linear}.ngx-cheatsheet.fade.in{z-index:10002;visibility:visible;opacity:1}.ngx-cheatsheet__hotkeys{width:100%;height:100%;display:table-cell;vertical-align:middle}.ngx-cheatsheet__hotkeys__title{font-weight:700;text-align:center;font-size:1.2em}.ngx-cheatsheet__hotkeys table{margin:auto;color:#333}.ngx-cheatsheet__hotkeys__keys{padding:5px;text-align:right}.ngx-cheatsheet__hotkeys__keys__key{display:inline-block;color:#fff;background-color:#333;border:1px solid #333;border-radius:5px;text-align:center;margin-right:5px;box-shadow:inset 0 1px 0 #666,0 1px 0 #bbb;padding:5px 9px;font-size:1em}.ngx-cheatsheet__hotkeys__keys__text{padding-left:10px;font-size:1em}.ngx-cheatsheet__hotkeys__close{position:fixed;top:20px;right:20px;font-size:2em;font-weight:700;padding:5px 10px;border:1px solid #ddd;border-radius:5px;min-height:45px;min-width:45px;text-align:center}@media all and (max-width:500px){.ngx-cheatsheet__hotkeys{font-size:.8em}}@media all and (min-width:750px){.ngx-cheatsheet__hotkeys{font-size:1.2em}}"]
            }] }
];
/** @nocollapse */
NgxCheatsheetComponent.ctorParameters = () => [
    { type: NgxHotkeysService }
];
NgxCheatsheetComponent.propDecorators = {
    title: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class NgxHotkeysModule {
    /**
     * @param {?=} options
     * @return {?}
     */
    static forRoot(options) {
        return {
            ngModule: NgxHotkeysModule,
            providers: [
                NgxHotkeysService,
                { provide: HotkeyOptions, useValue: options }
            ]
        };
    }
}
NgxHotkeysModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [NgxCheatsheetComponent, NgxHotkeysDirective],
                exports: [NgxHotkeysDirective, NgxCheatsheetComponent],
                providers: [NgxHotkeysService]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { NgxHotkeysService, NgxHotkeysDirective, NgxCheatsheetComponent, NgxHotkeysModule, HotkeyOptions as ɵa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,